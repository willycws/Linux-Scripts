Install of Django
-----------------
sudo pip install Django
  
Setup first Django project
--------------------------
1. Create a site: django-admin startproject mysite
2. cd to the newly created mysite
3. Run the site: python manage.py runserver
4. To run the site on a different port python manage.py runserver 127.0.0.1:9000
5. Create a new app under mysite: python manage.py startapp polls
6. Edit the codes for new app:
      polls/views.py
      --------------
      from django.http import HttpResponse
      def index(request):
        return HttpResponse("Hello, world. You're at the polls index.")
      
      Create a polls/urls.py
      ----------------
      from django.conf.urls import url
      from . import views

      urlpatterns = [
          url(r'^$', views.index, name='index'),
      ]
      
      mysite/urls.py
      --------------
      add url(r'^polls/', include('polls.urls')),  under urlpatterns      
      
7. Create database via SQLite       
    a. create the tables in the database: python manage.py migrate
    b. In poll apps create 2 models (questions and choice)
        polls/models.py
        ---------------
        from django.db import models

        class Question(models.Model):
            question_text = models.CharField(max_length=200)
            pub_date = models.DateTimeField('date published')

        class Choice(models.Model):
            question = models.ForeignKey(Question, on_delete=models.CASCADE)
            choice_text = models.CharField(max_length=200)
            votes = models.IntegerField(default=0)

8. Tell mysite to install polls app
    mysite/settings.py 
    ------------------
    Under INSTALLED_APPS 
    include: 'polls.apps.PollsConfig',
    
9. Tell Django that you have make changes to the model and wish to store as a migration (Migrations are how Django stores changes to your models (and thus your database schema) - theyâ€™re just files on disk.)
    python manage.py makemigrations polls
    
10. See what SQL that migration would run
    python manage.py sqlmigrate polls 0001
    
11. Run migrate again to create those model tables in your database
    python manage.py migrate
    
12. Using API to manage the models
    python manage.py shell
    
    >>> from polls.models import Question, Choice   # Import the model classes we just wrote.

    # No questions are in the system yet.
    >>> Question.objects.all()
    <QuerySet []>

    # Create a new Question.
    # Support for time zones is enabled in the default settings file, so
    # Django expects a datetime with tzinfo for pub_date. Use timezone.now()
    # instead of datetime.datetime.now() and it will do the right thing.
    >>> from django.utils import timezone
    >>> q = Question(question_text="What's new?", pub_date=timezone.now())

    # Save the object into the database. You have to call save() explicitly.
    >>> q.save()

    # Now it has an ID. Note that this might say "1L" instead of "1", depending
    # on which database you're using. That's no biggie; it just means your
    # database backend prefers to return integers as Python long integer
    # objects.
    >>> q.id
    1

    # Access model field values via Python attributes.
    >>> q.question_text
    "What's new?"
    >>> q.pub_date
    datetime.datetime(2012, 2, 26, 13, 0, 0, 775217, tzinfo=<UTC>)

    # Change values by changing the attributes, then calling save().
    >>> q.question_text = "What's up?"
    >>> q.save()

    # objects.all() displays all the questions in the database.
    >>> Question.objects.all()
    <QuerySet [<Question: Question object>]>
    ****Display is unhelpful***

13. How to make "<QuerySet [<Question: Question object>]>" display more helpful? Save the file and run the shell again
    polls/models.py
    ---------------
    import datetime
    from django.utils.encoding import python_2_unicode_compatible
    from django.db import models
    from django.utils import timezone

    @python_2_unicode_compatible    
    class Question(models.Model):
        # ...
        def was_published_recently(self):
            return self.pub_date >= timezone.now() - datetime.timedelta(days=1)        
        def __str__(self):
            return self.question_text   
            
    @python_2_unicode_compatible  # only if you need to support Python 2
    class Choice(models.Model):
        # ...
        def __str__(self):
            return self.choice_text        
    
14. Play with shell further
>>> from polls.models import Question, Choice

# Make sure our __str__() addition worked.
>>> Question.objects.all()
<QuerySet [<Question: What's up?>]>

# Django provides a rich database lookup API that's entirely driven by
# keyword arguments.
>>> Question.objects.filter(id=1)
<QuerySet [<Question: What's up?>]>
>>> Question.objects.filter(question_text__startswith='What')
<QuerySet [<Question: What's up?>]>

# Get the question that was published this year.
>>> from django.utils import timezone
>>> current_year = timezone.now().year
>>> Question.objects.get(pub_date__year=current_year)
<Question: What's up?>

# Request an ID that doesn't exist, this will raise an exception.
>>> Question.objects.get(id=2)
Traceback (most recent call last):
    ...
DoesNotExist: Question matching query does not exist.

# Lookup by a primary key is the most common case, so Django provides a
# shortcut for primary-key exact lookups.
# The following is identical to Question.objects.get(id=1).
>>> Question.objects.get(pk=1)
<Question: What's up?>

# Make sure our custom method worked.
>>> q = Question.objects.get(pk=1)
>>> q.was_published_recently()
True

# Give the Question a couple of Choices. The create call constructs a new
# Choice object, does the INSERT statement, adds the choice to the set
# of available choices and returns the new Choice object. Django creates
# a set to hold the "other side" of a ForeignKey relation
# (e.g. a question's choice) which can be accessed via the API.
>>> q = Question.objects.get(pk=1)

# Display any choices from the related object set -- none so far.
>>> q.choice_set.all()
<QuerySet []>

# Create three choices.
>>> q.choice_set.create(choice_text='Not much', votes=0)
<Choice: Not much>
>>> q.choice_set.create(choice_text='The sky', votes=0)
<Choice: The sky>
>>> c = q.choice_set.create(choice_text='Just hacking again', votes=0)

# Choice objects have API access to their related Question objects.
>>> c.question
<Question: What's up?>

# And vice versa: Question objects get access to Choice objects.
>>> q.choice_set.all()
<QuerySet [<Choice: Not much>, <Choice: The sky>, <Choice: Just hacking again>]>
>>> q.choice_set.count()
3

# The API automatically follows relationships as far as you need.
# Use double underscores to separate relationships.
# This works as many levels deep as you want; there's no limit.
# Find all Choices for any question whose pub_date is in this year
# (reusing the 'current_year' variable we created above).
>>> Choice.objects.filter(question__pub_date__year=current_year)
<QuerySet [<Choice: Not much>, <Choice: The sky>, <Choice: Just hacking again>]>

# Let's delete one of the choices. Use delete() for that.
>>> c = q.choice_set.filter(choice_text__startswith='Just hacking')
>>> c.delete()

Reference: https://docs.djangoproject.com/en/1.10/intro/tutorial02/


Delete all objects in the Reporter model
---------------------------------------
Reporter.objects.all().delete()

Add os environment values to decide the type of DynamoDb to use or other things
-------------------------------------------------------------------------------
ENV=dev python manage.py runserver 0.0.0.0:10701
inside your python code:
import os
ENV = os.environ.get('ENV')
