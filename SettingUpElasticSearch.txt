Setting up elasticsearch
------------------------
1. Download elasticsearch 1.1.1
2. untar the tar.gz
3. modify the config/elasticsearch.yml
    a. cluster.name: elasticsearch-twin
    b. node.name: "node"
    c. path.data: /mnt/es/data
    d. path.work: /mnt/es/work
    e. path.logs: /mnt/es/logs
    f. path.plugins: /mnt/es/plugins
4. save the config file
5. modify the config/logging.yml
    a. rest.action: TRACE
6. save the config file    
7. create a mappings folder "mkdir mappings". Thos folder will store all the mapping to tell elasticsearch which part of the json document to index and not to index
8. create a file mappings.json and indicate which field in the json required to be indexed
      "profile" : {
				"type" : "object",
				"properties" : {
					"id" : {"type" : "string", "store": "yes", "index" : "not_analyzed"},
					"className" : {"type" : "string", "store": "yes", "index" : "not_analyzed"},
					"name" : {"type" : "string", "store": "yes", "analyzer" : "classic"},
					"userName" : {"type" : "string", "store": "yes", "analyzer" : "classic"},
					"influenceScore": {"type" : "long", "store": "yes", "index" : "not_analyzed"},
					"sourceId" : {"type" : "string", "store": "yes", "index" : "not_analyzed"},
					"url" : {"type" : "string", "store": "yes", "analyzer" : "classic"},
					"dateTimeAdded": {"type" : "date", "store": "yes", "format" : "dateOptionalTime"},
					"dateTimeUpdated": {"type" : "date", "store": "yes", "format" : "dateOptionalTime"},
					"dateTimeTweetUsed": {"type" : "date", "store": "yes", "format" : "dateOptionalTime"},
					"twitterUser" : {
				        "type" : "object",
				        "properties" : {	
							"friendsCount": {"type" : "long", "store": "yes", "index" : "not_analyzed"},
							"location": {"type" : "string", "store": "yes", "analyzer" : "classic"},
							"favouritesCount": {"type" : "long", "store": "yes", "index" : "not_analyzed"},
							"screenName": {"type" : "string", "store": "yes", "analyzer" : "classic"},
							"profileImageUrl": {"type" : "string", "store": "yes", "analyzer" : "classic"},
							"listedCount": {"type" : "long", "store": "yes", "index" : "not_analyzed"},
							"geoEnabled": {"type" : "boolean", "store": "yes", "index" : "not_analyzed"},
							"id" : {"type" : "string", "store": "yes", "index" : "not_analyzed"},
							"timezone" : {"type" : "string", "store": "yes", "index" : "not_analyzed"},
							"verified": {"type" : "boolean", "store": "yes", "index" : "not_analyzed"},
							"description": {"type" : "string", "store": "yes", "analyzer" : "classic"},
							"name": {"type" : "string", "store": "yes", "analyzer" : "classic"},
							"followersCount": {"type" : "long", "store": "yes", "index" : "not_analyzed"},
							"language" : {"type" : "string", "store": "yes", "index" : "not_analyzed"},
							"statusesCount": {"type" : "long", "store": "yes", "index" : "not_analyzed"}
						}
					}
				}
			}
9. Save the mapping file
10. Install the elasticsearch GUI plugin
    a. cd to installation path of elasticsearch
    b. bin/plugin --install mobz/elasticsearch-head
    c. bin/plugin --install lukas-vlcek/bigdesk
11. Start the elasticsearch "nohup cd bin/elasticsearch .nohup &"
12. Access http://<ip_address_of_elasticsearch_server>:9200_plugin/head/
13. Create an index
      curl -XPUT "localhost:9200/twin/post/_meta" -d'
      {
        "settings" : {"index" : { "number_of_shards" : 5, "number_of_replicas" : 1 }},
        "type": "mongodb",
        "index": {
        "name": "twin",
        "type": "post"
        }
      }'
      
      curl -XPUT 'http://localhost:9200/twin/post/_mapping' -d @/home/hs/elasticsearch-1.1.1/config/mappings/mappings.json
14. Index is created and be seen in http://<ip_address_of_elasticsearch_server>:9200_plugin/head/

Install mongo connector and elastic-doc-manager
-----------------------------------------------
1. install mongo-connector - pip install mongo-connector
	if server got no access to internet
		cd ~/Download
		git clone https://github.com/mongodb-labs/mongo-connector.git
		cd mongo-connector
		python setup.py install
2. If certain package cannot be installed, use the following steps and download the tar.gz
	pymongo - https://pypi.python.org/simple/pymongo/ 
	pysolr - https://pypi.python.org/simple/pymongo/ 
	elasticsearch - https://pypi.python.org/simple/elasticsearch/
	urllib3 - https://pypi.python.org/simple/urllib3/
   (pls take note of the version they recommend in the error display during the installation of mongo-connector)
3. Use FileZilla to transfer the all the tar.gz to the elasticsearch server
4. Do the following steps to install the tar.gz packages
	a. cd /usr/share
	b. tar -zxvf <filename>.tar.gz
	c. sudo python setup.py install
5. mkdir /mnt/es/plugins/mongo-connector
6. mkdir /mnt/es/plugins/mongo-connector/logs
7. create a config.json file ("__" means it is commented out)
{
    "__comment__": "Configuration options starting with '__' are disabled",
    "__comment__": "To enable them, remove the preceding '__'",

    "mainAddress": "<ip_address_of_mongodb_server>:27018",
    "oplogFile": "/mnt/es/plugins/mongo-connector/oplog.timestamp",
    "noDump": false,
    "batchSize": 1000,
    "verbosity": 3,
    "continueOnError": false,

    "logging": {
        "type": "file",
        "filename": "/mnt/es/plugins/mongo-connector/logs/mongo-connector.log",
        "__format": "%(asctime)s [%(levelname)s] %(name)s:%(lineno)d - %(message)s",
        "rotationWhen": "D",
        "__rotationInterval": 1,
        "rotationBackups": 10,

        "__type": "syslog",
        "__host": "localhost:514"
    },

    "authentication": {
        "adminUsername": "oplogger",
        "password": "S***************2",
        "__passwordFile": "/mongodb-keyfile"
    },

    "__comment__": "For more information about SSL with MongoDB, please see http://docs.mongodb.org/manual/tutorial/configure-ssl-clients/",
    "__ssl": {
        "__sslCertfile": "Path to certificate to identify the local connection against MongoDB",
        "__sslKeyfile": "Path to the private key for sslCertfile. Not necessary if already included in sslCertfile.",
        "__sslCACerts": "Path to concatenated set of certificate authority certificates to validate the other side of the connection",
        "__sslCertificatePolicy": "Policy for validating SSL certificates provided from the other end of the connection. Possible values are 'required' (require and validate certificates), 'optional' (validate but don't require a certificate), and 'ignored' (ignore certificates)."
    },

    "__fields": ["field1", "field2", "field3"],

    "namespaces": {
        "include": ["test.post"],
        "mapping": {
            "test.post": "twin.post"
        },
	"__gridfs": ["db.fs"]
    },

    "docManagers": [
        {
            "docManager": "elastic_doc_manager",
            "targetURL": "localhost:9200",
            "bulkSize": 1000,
            "uniqueKey": "_id",
            "__autoCommitInterval": null
        }
    ]
}
8. Save the config file
9. install the elastic-doc-manager "pip install elastic-doc-manager"
10. if server got no access to internet
		cd ~/Download
		git clone https://github.com/mongodb-labs/elastic-doc-manager
		cd elastic-doc-manager
		python setup.py install
11. Follow step 2, 3, 4 if certain python package is missing.
12. create a shell script to run the mongo-connector
13. cd ~
14. ./startMongoConnector.sh to run the mongo-connector
15. ***if the mongodb instances are running in authentication mode, the adminUsername and password section in the config.json must be uncommented.

shell script to Start Mongo connector (startMongoConnector.sh)
-------------------------------------------------------------
#!/bin/bash
cd /mnt/es/plugins/mongo-connector
nohup mongo-connector -c config.json > .nohup &
    
Reference links:
----------------
https://github.com/mongodb-labs/mongo-connector/wiki/Installation
https://github.com/mongodb-labs/elastic-doc-manager
