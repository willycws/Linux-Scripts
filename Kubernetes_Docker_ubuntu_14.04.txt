https://docs.docker.com/engine/installation/linux/ubuntu/#install-using-the-repository
1. Remove any old version of docker sudo apt-get remove docker docker-engine
2. sudo apt-get update
3. sudo apt-get install linux-image-extra-$(uname -r) linux-image-extra-virtual
4. install community version sudo apt-get install apt-transport-https ca-certificates curl software-properties-common
5. curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
6. For AMD64: sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
7. sudo apt-get update
8. Test whether docker successfully instaled: sudo docker run hello-world 

https://gettech1.wordpress.com/2016/05/26/setting-up-kubernetes-cluster-on-ubuntu-14-04-lts/
STEP 1] Add your user to sudoers or switch to root user.

STEP 2] Install prerequisites needed

  2.1  Install docker on all hosts.
       $sudo apt-get update
       $sudo apt-key adv –keyserver hkp://pgp.mit.edu:80 –recv-keys 58118E89F3A912897C070ADBF76221572C52609D
       $ echo "deb https://apt.dockerproject.org/repo ubuntu-trusty main" | sudo tee /etc/apt/sources.list.d/docker.list  
       $ sudo apt-get update
       $ sudo apt-get install docker-engine=1.8.3-0~trusty
       $ docker -v
       
  2.2 Install bridge-utils which is needed for container management inside pods.

       $ sudo apt-get install bridge-utils

STEP 3] clone git repo  

         $ sudo apt-get install git -y

         $ git clone https://github.com/kubernetes/kubernetes.git

STEP 4] Download and Install necessary binaries

         $ cd kubernetes/cluster/ubuntu

         $ ./download-release.sh

         $ ls binaries/

STEP 5] Configure cluster and define roles of each machine in the cluster. Edit config_default.sh file to have following.

        $ vi config-default.sh

      export nodes=${nodes:-“devops@172.20.75.106 devops@172.20.75.128 devops@172.20.75.196”}

    roles=${roles:-“ai i i”}

    export NUM_NODES=${NUM_NODES:-3}

    export

    SERVICE_CLUSTER_IP_RANGE=${SERVICE_CLUSTER_IP_RANGE:-192.168.3.0/24}

    export FLANNEL_NET=${FLANNEL_NET:-172.16.0.0/16}

Note :- do not touch other parameters of the file.
 

STEP 6] generate rsa key . This is needed for kubernete deployment

        $ ssh-keygen -t rsa
        
        Enter a name: kubernete

        $ cat /root/.ssh/kubernete.pub >> /root/.ssh/authorized_keys

STEP 7] run the kube-up.sh script to have cluster deployed. It will ask you for the password several times so be there.
cd cluster
export KUBE_VERSION=1.5.2
$ KUBERNETES_PROVIDER=ubuntu ./kube-up.sh

STEP 7a] edit the get-kube-binaries.sh file      sudo gedit get-kube-binaries.sh 
          DOWNLOAD_URL_PREFIX="${KUBERNETES_RELEASE_URL}/${KUBE_VERSION}" to DOWNLOAD_URL_PREFIX="${KUBERNETES_RELEASE_URL}/v${KUBE_VERSION}"


STEP 8] set PATH to have smooth working of binaries.

            $ export PATH=$PATH:/<location of kubernetes>/kubernetes/cluster/ubuntu/binaries/

            $ export PATH=$PATH:/opt/bin/

STEP 9] some helpful commands.

           $ kubectl get nodes

           $ kubectl get pods -o wide

           $ kubectl –help

STEP 10] Access web UI at

          http://172.20.75.106:8080/ui
